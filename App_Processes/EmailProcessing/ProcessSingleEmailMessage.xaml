<Activity mc:Ignorable="sap sap2010" x:Class="ProcessEmailMessage" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:snm="clr-namespace:System.Net.Mail;assembly=System" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_Message" Type="InArgument(snm:MailMessage)" />
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="io_SummaryResults" Type="InOutArgument(scg:Dictionary(x:String, x:Int32))" />
    <x:Property Name="in_TransactionNumber" Type="InArgument(x:Int32)" />
  </x:Members>
  <sap:VirtualizedContainerService.HintSize>993,3348</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="18">
      <x:String>System.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.IO</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="23">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.CV</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPathTeam.SharePoint</AssemblyReference>
      <AssemblyReference>OfficeDevPnP.Core</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="This workflow receives an email message as input and applies a series of steps to it: It retrieves attachments from the message.  Only zip file attachments are processed. Zip files are extracted to temp folder. If extracted files are CSV type files, they are uploaded to SharePoint site and copied to a network share. Separate workflow files are used for clearing zip extraction, zip file extraction, getting extracted file list, and SharePoint and network file copy.&#xA;&#xA;Pre Condition: None&#xA;Post Condition: Files copied to SharePoint site and to network shared folder." DisplayName="Process a single email message" sap:VirtualizedContainerService.HintSize="973,3288" sap2010:WorkflowViewState.IdRef="Sequence_2">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="AttachmentsFolder" />
      <Variable x:TypeArguments="scg:List(x:String)" Default="[New List(Of String)]" Name="ZipItemsExtracted" />
      <Variable x:TypeArguments="x:Boolean" Default="False" Name="ZipAttachmentsFound" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Assign sap2010:Annotation.AnnotationText="Initialize 'ZipAttachmentsFound' to False" DisplayName="Assign - Init ZipAttachmentsFound" sap:VirtualizedContainerService.HintSize="931,87" sap2010:WorkflowViewState.IdRef="Assign_6">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Boolean">[ZipAttachmentsFound]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Boolean">False</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <ui:ForEach x:TypeArguments="snm:Attachment" CurrentIndex="{x:Null}" sap2010:Annotation.AnnotationText="Check if message has zip attachments before saving the group of attachments to the local system. Only Attachment sets containing zip files will be processed by this workflow. If any zip attachments are found 'ZipAttachmentsFound' will be set to True." DisplayName="For Each - Check if message has any zip attaments" sap:VirtualizedContainerService.HintSize="931,415" sap2010:WorkflowViewState.IdRef="ForEach`1_6" Values="[in_Message.Attachments]">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="snm:Attachment">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="snm:Attachment" Name="Attachment" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="304,194" sap2010:WorkflowViewState.IdRef="Sequence_12">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" Name="FileExt" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign sap2010:Annotation.AnnotationText="Set ZipAttachmentsFound to True if attachment file name ends with '.zip'" DisplayName="Assign - Set ZipAttachmentsFound" sap:VirtualizedContainerService.HintSize="262,102" sap2010:WorkflowViewState.IdRef="Assign_5">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Boolean">[ZipAttachmentsFound]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Boolean">[If(Right(Attachment.Name.ToString, 4).ToLower() = ".zip", True, ZipAttachmentsFound)]</InArgument>
              </Assign.Value>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </Assign>
          </Sequence>
        </ActivityAction>
      </ui:ForEach.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ForEach>
    <If Condition="[ZipAttachmentsFound]" DisplayName="If - If any zip files were found, then process attachments downloaded for the current message" sap:VirtualizedContainerService.HintSize="931,2512" sap2010:WorkflowViewState.IdRef="If_2">
      <If.Then>
        <Sequence DisplayName="Sequence - Process current message" sap:VirtualizedContainerService.HintSize="786,2364" sap2010:WorkflowViewState.IdRef="Sequence_6">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message - Info identifying the email message" sap:VirtualizedContainerService.HintSize="744,91" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="Info" Message="[DateTime.Now().ToString() + &quot; - Message From: &quot; + in_Message.From.ToString() + vbCrLf + &quot;Message Date: &quot; + in_Message.Headers(&quot;Date&quot;).ToString() + vbCrLf + &quot;Subject: &quot; + in_Message.Subject.ToString() + vbCrLf + &quot;Attachments Count: &quot; + in_Message.Attachments.Count.ToString()]" />
          <Assign sap2010:Annotation.AnnotationText="Local folder where email attachments will be downloaded, loaded from Config file" DisplayName="Assign - Get AttachmentsFolder" sap:VirtualizedContainerService.HintSize="744,102" sap2010:WorkflowViewState.IdRef="Assign_7">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[AttachmentsFolder]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[in_Config("EmailAttachmentsFolder").ToString()]</InArgument>
            </Assign.Value>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Assign>
          <ui:SaveMailAttachments Attachments="{x:Null}" DisplayName="Save Attachments - Download attachments" FolderPath="[AttachmentsFolder]" sap:VirtualizedContainerService.HintSize="744,87" sap2010:WorkflowViewState.IdRef="SaveMailAttachments_1" Message="[in_Message]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:SaveMailAttachments>
          <ui:ForEach x:TypeArguments="snm:Attachment" CurrentIndex="{x:Null}" DisplayName="For Each - Process each attachment of current message" sap:VirtualizedContainerService.HintSize="744,1332" sap2010:WorkflowViewState.IdRef="ForEach`1_4" Values="[in_Message.Attachments]">
            <ui:ForEach.Body>
              <ActivityAction x:TypeArguments="snm:Attachment">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="snm:Attachment" Name="Attachment" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Process single attachment" sap:VirtualizedContainerService.HintSize="708,1198" sap2010:WorkflowViewState.IdRef="Sequence_11">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Log Message - Log attachment name" sap:VirtualizedContainerService.HintSize="666,91" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Info" Message="[DateTime.Now().ToString() + &quot; - Processing attachment: &quot; + Attachment.Name]" />
                  <If sap2010:Annotation.AnnotationText="If the attachment is a zip archive, extract files from the archive and then move the email message to another email folder, specified in Config file setting 'EmailArchiveFolder'" Condition="[Right(Attachment.Name, 4).ToLower() = &quot;.zip&quot;]" DisplayName="If - If attachment is a zip archive file (*.zip), process the attachment - bypass other file types" sap:VirtualizedContainerService.HintSize="666,975" sap2010:WorkflowViewState.IdRef="If_5">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <Sequence sap2010:Annotation.AnnotationText="Process steps: Extract content from zip, which may be Files or Folders, then upload the extracted items to SharePoint" DisplayName="Process zip attachments" sap:VirtualizedContainerService.HintSize="421,785" sap2010:WorkflowViewState.IdRef="Sequence_9">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Delete zip file extraction folder, it will be recreated by 'ExtractZippedFiles' workflow (next activity)." DisplayName="Invoke DeleteExtractFolder workflow" sap:VirtualizedContainerService.HintSize="379,129" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_11" UnSafe="False" WorkflowFileName="App_Processes\ZipFileProcessing\DeleteExtractFolder.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                        <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Invoke workflow to extract files from zip archive" DisplayName="Invoke ExtractZippedFiles workflow" sap:VirtualizedContainerService.HintSize="379,114" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_7" UnSafe="False" WorkflowFileName="App_Processes\ZipFileProcessing\ExtractZippedFiles.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_ZipPath">[AttachmentsFolder + "\" + Attachment.Name]</InArgument>
                            <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_Message">[in_Message]</InArgument>
                            <InArgument x:TypeArguments="x:Int32" x:Key="in_TransactionNumber">[in_TransactionNumber]</InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                        <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Get list of file paths for all files extracted from zip file. Takes the 'in_Config' Dictionary as input and returns a &#xA;List(Of String) with a list of file paths." DisplayName="Invoke GetExtractedFileList workflow" sap:VirtualizedContainerService.HintSize="379,144" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_12" UnSafe="False" WorkflowFileName="App_Processes\ZipFileProcessing\GetExtractedFileList.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
                            <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="out_FileList">[ZipItemsExtracted]</OutArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                        <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Invoke workflow to upload extracted items to SharePoint folder. If items are subdirectories, files within them will be uploaded from the subdirectories." DisplayName="Invoke UploadExtractedItems workflow" sap:VirtualizedContainerService.HintSize="379,144" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_8" UnSafe="False" WorkflowFileName="App_Processes\ZipFileProcessing\UploadExtractedItems.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
                            <InArgument x:TypeArguments="scg:List(x:String)" x:Key="in_ItemsToUpload">[ZipItemsExtracted]</InArgument>
                            <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:Int32)" x:Key="io_SummaryResults">[io_SummaryResults]</InOutArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                      </Sequence>
                    </If.Then>
                    <If.Else>
                      <ui:Delete ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="If any non zip files were downloaded  in the set of attachments, delete them from local folder." DisplayName="Delete non-zip files downloaded" sap:VirtualizedContainerService.HintSize="200,94" sap2010:WorkflowViewState.IdRef="Delete_2" Path="[AttachmentsFolder + &quot;\&quot; + Attachment.Name]">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:Delete>
                    </If.Else>
                  </If>
                </Sequence>
              </ActivityAction>
            </ui:ForEach.Body>
          </ui:ForEach>
          <If Condition="[ZipAttachmentsFound]" DisplayName="If - If any zip files were downloaded, move the message to archive email folder" sap:VirtualizedContainerService.HintSize="744,369" sap2010:WorkflowViewState.IdRef="If_4">
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="421,221" sap2010:WorkflowViewState.IdRef="Sequence_13">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Last step of single message processing is to move the message to the archive email folder." DisplayName="Invoke MoveEmailMessage workflow" sap:VirtualizedContainerService.HintSize="379,129" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_6" UnSafe="False" WorkflowFileName="App_Processes\EmailProcessing\MoveEmailMessage.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="snm:MailMessage" x:Key="in_MailMessage">[in_Message]</InArgument>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
                    <InArgument x:TypeArguments="x:Boolean" x:Key="in_MoveToErrorFolder">False</InArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:InvokeWorkflowFile>
              </Sequence>
            </If.Then>
          </If>
          <ui:LogMessage DisplayName="Log Message - Transaction number" sap:VirtualizedContainerService.HintSize="744,91" sap2010:WorkflowViewState.IdRef="LogMessage_8" Level="Info" Message="[DateTime.Now().ToString() + &quot; - Process completed for message #&quot; + in_TransactionNumber.ToString()]" />
        </Sequence>
      </If.Then>
    </If>
  </Sequence>
</Activity>